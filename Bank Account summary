Users table:
+------------+--------------+-------------+
| user_id    | user_name    | credit      |
+------------+--------------+-------------+
| 1          | Moustafa     | 100         |
| 2          | Jonathan     | 200         |
| 3          | Winston      | 10000       |
| 4          | Luis         | 800         | 
+------------+--------------+-------------+

Transaction table:
+------------+------------+------------+----------+---------------+
| trans_id   | paid_by    | paid_to    | amount   | transacted_on |
+------------+------------+------------+----------+---------------+
| 1          | 1          | 3          | 400      | 2020-08-01    |
| 2          | 3          | 2          | 500      | 2020-08-02    |
| 3          | 2          | 1          | 200      | 2020-08-03    |
+------------+------------+------------+----------+---------------+

Result table:
+------------+------------+------------+-----------------------+
| user_id    | user_name  | credit     | credit_limit_breached |
+------------+------------+------------+-----------------------+
| 1          | Moustafa   | -100       | Yes                   | 
| 2          | Jonathan   | 500        | No                    |
| 3          | Winston    | 9990       | No                    |
| 4          | Luis       | 800        | No                    |
+------------+------------+------------+-----------------------+
Moustafa paid $400 on "2020-08-01" and received $200 on "2020-08-03", credit (100 -400 +200) = -$100
Jonathan received $500 on "2020-08-02" and paid $200 on "2020-08-08", credit (200 +500 -200) = $500
Winston received $400 on "2020-08-01" and paid $500 on "2020-08-03", credit (10000 +400 -500) = $9990
Luis didn't received any transfer, credit = $800


Query:
--drop table users
--create table users(user_id int, user_name varchar(50), credit int)
--insert into users
--values
--( 1          , 'Moustafa'     , 100        ) ,
--( 2          , 'Jonathan'     , 200        ) ,
--( 3          , 'Winston'      , 10000      ) ,
--( 4          , 'Luis'         , 800         ) 


--drop table transactions
--create table transactions(trans_id int, paid_by int, paid_to int, amount int, transacted_on date)
--insert into transactions
--values
--( 1          , 1          , 3          , 400      , '2020-08-01'   ) ,
--( 2          , 3          , 2          , 500      , '2020-08-02'   ) ,
--( 3          , 2          , 1          , 200      , '2020-08-03'   ) 

SELECT A.USER_ID,
       A.USER_NAME,
       (A.PAID_BY + B.PAID_TO+A.CREDIT) AS CREDIT,
       CASE WHEN (A.PAID_BY+B.PAID_TO+A.CREDIT)>1 THEN 'NO'
            ELSE 'YES' END AS CREDIT_LIMIT_BREACHED

        FROM 
 (           
SELECT U.USER_ID,
       U.USER_NAME,
	   U.CREDIT,
       COALESCE(-1*T.AMOUNT,0) AS PAID_BY
       
FROM USERS U LEFT JOIN TRANSACTIONS T ON U.USER_ID = T.PAID_BY 
) A JOIN (
SELECT U.USER_ID,
       U.USER_NAME,
	   U.CREDIT,
       COALESCE(T.AMOUNT,0) AS PAID_TO
       
FROM USERS U LEFT JOIN TRANSACTIONS T ON U.USER_ID = T.PAID_TO 
) B ON A.USER_ID= B.USER_ID

or

select u.user_id,u.user_name, coalesce(u.credit+a.credit,u.credit) as credit,
case when u.credit>a.credit then 'No' else 'Yes' end as credit_limit_breached
from users u left join (
select u.user_id, 
u.user_name, 
coalesce(sum(t1.amount)-sum(t2.amount),0) as credit
from users u
left join transactions t1
on u.user_id=t1.paid_to 
left join transactions t2 
on u.user_id=t2.paid_by
group by u.user_id,u.user_name) a
on u.user_id=a.user_id
