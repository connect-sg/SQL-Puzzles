Query:

Write an SQL query to report the students (student_id, student_name) being “quiet” in ALL exams.


 
Don’t return the student who has never taken any exam. Return the result table ordered by student_id.

The query result format is in the following example.

Student table:
+-------------+---------------+
| student_id  | student_name  |
+-------------+---------------+
| 1           | Daniel        |
| 2           | Jade          |
| 3           | Stella        |
| 4           | Jonathan      |
| 5           | Will          |
+-------------+---------------+

Exam table:
+------------+--------------+-----------+
| exam_id    | student_id   | score     |
+------------+--------------+-----------+
| 10         |     1        |    70     |
| 10         |     2        |    80     |
| 10         |     3        |    90     |
| 20         |     1        |    80     |
| 30         |     1        |    70     |
| 30         |     3        |    80     |
| 30         |     4        |    90     |
| 40         |     1        |    60     |
| 40         |     2        |    70     |
| 40         |     4        |    80     |
+------------+--------------+-----------+

Result table:
+-------------+---------------+
| student_id  | student_name  |
+-------------+---------------+
| 2           | Jade          |
+-------------+---------------+

For exam 1: Student 1 and 3 hold the lowest and high score respectively.
For exam 2: Student 1 hold both highest and lowest score.
For exam 3 and 4: Studnet 1 and 4 hold the lowest and high score respectively.
Student 2 and 5 have never got the highest or lowest in any of the exam.
Since student 5 is not taking any exam, he is excluded from the result.
So, we only return the information of Student 2.


Query:
--drop table student
--create table student(student_id int, student_name varchar(50))
--insert into student 
--values
--( 1           , 'Daniel'        ),
--( 2           , 'Jade'          ),
--( 3           , 'Stella'        ),
--( 4           , 'Jonathan'      ),
--( 5           , 'Will'          )


--drop table exam
--create table exam(exam_id int, student_id int, score int)
--insert into exam 
--values
--( 10         ,     1        ,    70     ),
--( 10         ,     2        ,    80     ),
--( 10         ,     3        ,    90     ),
--( 20         ,     1        ,    80     ),
--( 30         ,     1        ,    70     ),
--( 30         ,     3        ,    80     ),
--( 30         ,     4        ,    90     ),
--( 40         ,     1        ,    60     ),
--( 40         ,     2        ,    70     ),
--( 40         ,     4        ,    80     )


select student_id, student_name from student where student_id not in (
select e.student_id from exam e join (
select exam_id, max(score) as score
from exam 
group by exam_Id
union
select exam_id, min(score) as score
from exam 
group by exam_Id) b
 on e.exam_id=b.exam_id and e.score=b.score) and student_id in (select student_id from exam)
 
 
 OR 
 
 select distinct s.student_id, s.student_name
from student s 
join exam e  on s.student_id = e.student_id
where e.student_id not in (select distinct e.student_id from exam e
                                                 where score in (select max(score) from exam where exam_id =e.exam_id) or score in (select min(score) from exam where exam_id =e.exam_id))

OR 


with cte as 
(
select exam_id, student_id, lead(score) over(partition by exam_id order by score) as s1, 
lag(score) over(partition by exam_id order by score) as s2 from exam) 



select distinct student_id from cte  
       where s1 is not null and 
	         s2 is not null and 
			 student_id not in (select student_id from cte where s1 is null or s2 is null)
