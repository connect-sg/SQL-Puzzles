Write an SQL query to find the start and end number of continuous ranges in table Logs.

Order the result table by start_id.

The query result format is in the following example:

Logs table:
+------------+
| log_id     |
+------------+
| 1          |
| 2          |
| 3          |
| 7          |
| 8          |
| 10         |
+------------+

Result table:
+------------+--------------+
| start_id   | end_id       |
+------------+--------------+
| 1          | 3            |
| 7          | 8            |
| 10         | 10           |
+------------+--------------+
The result table should contain all ranges in table Logs.
From 1 to 3 is contained in the table.
From 4 to 6 is missing in the table
From 7 to 8 is contained in the table.
Number 9 is missing in the table.
Number 10 is contained in the table.


Query:
--create table logs (log_id int)
--insert into logs 
--values
--( 1 )         ,
--( 2 )         ,
--( 3 )         ,
--( 7 )         ,
--( 8 )         ,
--( 10)  


select distinct min(a.log_id) over(partition by a.diff) as start, max(a.log_id) over(partition by a.diff) as endp from(
select log_id,log_id-row_number()over(order by log_id) as diff from logs) a;

OR

select min(a.log_id) as start_no,max(a.log_id) as end_no from 
(
select l1.log_id,
       count(l2.log_id) as cnt,
       (l1.log_id -count(l2.log_id)) as diff
from logs l1 join logs l2 on l1.log_id>=l2.log_id
group by l1.log_id
) a
group by a.diff


OR

with cte as (
	select l1.log_id,count(l2.log_id) as rownum
	from logs l1 join logs l2
	     on l1.log_id>=l2.log_id
	group by l1.log_id)

select b.start_id, 
       COALESCE(LEAD(b.end_id,1) over(order by b.start_id ),(SELECT MAX(LOG_ID) FROM LOGS))  
	   from (
			select min(a.log_id) as start_id, 
			a.end_id from (
					select l1.log_id, 
					case when (l1.log_id-l2.log_id)!= (l1.rownum-l2.rownum) then l2.log_id
					else 0 end as end_id
from cte l1 left join cte l2 
on l1.rownum=l2.rownum+1) a
group by a.end_id) B

OR 


select min(log_id) as start_id, max(log_id) as end_id from (
select log_id,log_id-row_number() over(order by log_id) as diff from logs) a group by a.diff
