A system is running one task every day. Every task is independent of the previous tasks. The tasks can fail or succeed.

Write an SQL query to generate a report of period_state for each continuous interval of days in the period from 2019-01-01 to 2019-12-31.


 
period_state is ‘failed’ if tasks in this interval failed or ‘succeeded’ if tasks in this interval succeeded. Interval of days are retrieved as start_date and end_date.

Order result by start_date.

The query result format is in the following example:

Failed table:
+-------------------+
| fail_date         |
+-------------------+
| 2018-12-28        |
| 2018-12-29        |
| 2019-01-04        |
| 2019-01-05        |
+-------------------+

Succeeded table:
+-------------------+
| success_date      |
+-------------------+
| 2018-12-30        |
| 2018-12-31        |
| 2019-01-01        |
| 2019-01-02        |
| 2019-01-03        |
| 2019-01-06        |
+-------------------+

Result table:
+--------------+--------------+--------------+
| period_state | start_date   | end_date     |
+--------------+--------------+--------------+
| succeeded    | 2019-01-01   | 2019-01-03   |
| failed       | 2019-01-04   | 2019-01-05   |
| succeeded    | 2019-01-06   | 2019-01-06   |
+--------------+--------------+--------------+

The report ignored the system state in 2018 as we care about the system in the period 2019-01-01 to 2019-12-31.
From 2019-01-01 to 2019-01-03 all tasks succeeded and the system state was "succeeded".
From 2019-01-04 to 2019-01-05 all tasks failed and system state was "failed".
From 2019-01-06 to 2019-01-06 all tasks succeeded and system state was "succeeded".

Query:
--create table failed (fail_date date)
--insert into failed values ('2018-12-28'),
-- ('2018-12-29'),
--('2019-01-04'),
--('2019-01-05')

--create table succeeded (success_date date)
--insert into succeeded 
--values ('2018-12-30'),
--('2018-12-31'),
--('2019-01-01'),
--('2019-01-02'),
--('2019-01-03'),
--('2019-01-06')

with cte as (
select b.status, case when b.status!=b.status1 or b.status1 is null then b.date else null end as start_date, 
case when b.status!=b.status2 or b.status2 is null  then b.date else null end as end_date from 
(
select a.date,a.status,lag(a.status) over(order by date) as status1, lead(a.status) over(order by date) as status2 from (
select success_date as date,'success' as status from succeeded where success_date between '2019-01-01' and '2019-12-31'
union
select fail_date as date,'fail' as status from failed where fail_date between '2019-01-01' and '2019-12-31') a) b )



select distinct a.status,a.start_date,b.end_date from
(select status, start_date from cte  where start_date is not null) a join 
(select status, end_date from cte  where end_date is not null ) b on a.status =b.status and a.start_date<b.end_date;


OR

--select dateadd(day,1,'2019-01-01')

with tab as (
select * from (
select fail_date as sdate, 
       'Failed' as status
from failed
union 
select success_date as sdate,
       'succeeded' as status
from succeeded) a
where a.sdate between '2019-01-01' and  '2019-12-31')

--select * from tab order by sdate;

select  b.status,
		b.start_date, 
		case when b.start_date > dateadd(day,-1,min(b.end_date)) then  min(b.end_date)
		else dateadd(day,-1,min(b.end_date)) end   
		as end_date 

from (
			select status,
					min(a.start_date) as start_date,
					min(a.end_date) as end_date from ( 
					select min(t1.sdate) as start_date,
					t1.status,coalesce(t2.sdate,t1.sdate) as end_date
			--t1.status, min(t1.sdate) as start_date,dateadd(day,-1,min(t2.sdate)) as end_date 
			from tab t1
			 left join  tab t2
			on t1.sdate<t2.sdate and t1.status!=t2.status
			group by t1.status,t1.sdate,t2.sdate) a
			  group by a.status,a.end_date) b
group by b.status,b.start_date
